<?php

/**
 * @file
 * Content notify module functions.
 */

use Drupal\Core\Cache\Cache;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\node\Entity\Node;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;

/**
 * Implements hook_help().
 */
function content_notify_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the content_notify module.
    case 'help.page.content_notify':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('content notification functionality') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_entity_base_field_info().
 */
function content_notify_entity_base_field_info(EntityTypeInterface $entity_type) {
  if ($entity_type->id() === 'node') {
    $checkSchedulerExists = \Drupal::service('content_notify.manager')->checkSchedulerExists();

    if ($checkSchedulerExists) {
      $fields['notify_unpublish_on'] = BaseFieldDefinition::create('timestamp')
        ->setLabel(t('Notify unpublish on'))
        ->setDisplayConfigurable('form', TRUE)
        ->setDisplayOptions('form', [
          'type' => 'datetime_timestamp_no_default',
          'weight' => 30,
        ])
        ->setTranslatable(TRUE)
        ->setRevisionable(TRUE)
        ->setDescription(t('Date for notify unpublish content'));
    }
    $fields['notify_invalid_on'] = BaseFieldDefinition::create('timestamp')
      ->setLabel(t('Notify still valid on'))
      ->setDisplayConfigurable('form', TRUE)
      ->setDisplayOptions('form', [
        'type' => 'datetime_timestamp_no_default',
        'weight' => 30,
      ])
      ->setTranslatable(TRUE)
      ->setRevisionable(TRUE)
      ->setDescription(t('Date for notify invalid content'));

    return $fields;
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for node_form().
 */
function content_notify_form_node_form_alter(&$form, FormStateInterface $form_state) {

  /** @var \Drupal\content_notify\ContentNotifyManager $content_notify_manager */
  $content_notify_manager = \Drupal::service('content_notify.manager');
  $hide_unpublish = FALSE;
  $hide_invalid = FALSE;
  /** @var \Drupal\node\NodeTypeInterface $type */
  $type = $form_state->getFormObject()->getEntity()->type->entity;
  $checkUnpublishedNodeType = $content_notify_manager->checkNodeType('unpublish', $type->id());
  $checkOldNodeType = $content_notify_manager->checkNodeType('invalid', $type->id());
  $checkSchedulerExists = $content_notify_manager->checkSchedulerExists();

  if (!$checkUnpublishedNodeType || !$checkSchedulerExists && !isset($form['unpublish_on'])) {
    unset($form['notify_unpublish_on']);
    $hide_unpublish = TRUE;
  }

  if (!$checkOldNodeType) {
    unset($form['notify_invalid_on']);
    $hide_invalid = TRUE;
  }
  if ($hide_invalid && $hide_unpublish) {
    return;
  }

  // Create the group for the fields.
  $form['content_notify_settings'] = [
    '#type' => 'details',
    '#title' => t('Content notify options'),
    '#weight' => 35,
    '#group' => 'advanced',
    '#attributes' => ['class' => ['content-notify-form']],
    '#optional' => FALSE,
  ];

  // Attach the fields to group.
  if (!$hide_unpublish) {
    $form['notify_unpublish_on']['#group'] = 'content_notify_settings';
  }
  if (!$hide_invalid) {
    $form['notify_invalid_on']['#group'] = 'content_notify_settings';
  }

  if (!\Drupal::currentUser()->hasPermission('content notification of nodes')) {
    // Do not show the content notification fields
    // for users who do not have permission.
    $form['content_notify_settings']['#access'] = FALSE;
  }

  // Check which widget type is set for the scheduler fields, and give a warning
  // if the wrong one has been set and provide a hint and link to fix it.
  $storage_form_display = $form_state->getStorage()['form_display'];
  $content = $storage_form_display->get('content');
  $pluginDefinitions = $storage_form_display->get('pluginManager')->getDefinitions();
  $correct_widget_id = 'datetime_timestamp_no_default';
  foreach (['notify_unpublish_on' => 'notify_unpublish_on', 'notify_invalid_on' => 'notify_invalid_on'] as $field => $enabled) {
    $actual_widget_id = $content[$field]['type'];
    if ($enabled && $actual_widget_id != $correct_widget_id) {
      drupal_set_message(t('The widget for field %field is incorrectly set to %wrong. This should be changed to %correct by an admin user via Field UI <a href="@link">content type form display</a> :not_available', [
        '%field' => (string) $form[$field]['widget']['#title'],
        '%correct' => (string) $pluginDefinitions[$correct_widget_id]['label'],
        '%wrong' => (string) $pluginDefinitions[$actual_widget_id]['label'],
        '@link' => \Drupal::moduleHandler()->moduleExists('field_ui') ? Url::fromRoute('entity.entity_form_display.node.default', ['node_type' => $type->get('type')])->toString() : '#',
        ':not_available' => \Drupal::moduleHandler()->moduleExists('field_ui') ? '' : ('(' . t('not available') . ')'),
      ]), 'warning', FALSE);
    }
  }
}

/**
 * Returns if in window between notification and unpublishing.
 *
 * @param \Drupal\node\Entity\Node $node
 *   The node.
 * @param int $current_time
 *   The time.
 *
 * @return bool
 *   If in the window or not.
 */
function content_notify_is_in_window(Node $node, $current_time) {
  $in_window = FALSE;
  $unpublish_on_unixtime = $node->unpublish_on->value;
  $notify_invalid_on_unixtime = $node->notify_invalid_on->value;

  if ((!empty($unpublish_on_unixtime) || !empty($notify_invalid_on_unixtime))
    && $notify_invalid_on_unixtime < $current_time
    && $node->isPublished()
    && $node->isDefaultTranslation()
  ) {
    $in_window = TRUE;
  }

  return $in_window;
}

/**
 * Generates unpublishing warning.
 *
 * @param \Drupal\node\Entity\Node $node
 *   The node.
 *
 * @return string|null
 *   NULL if no warning should show. Otherwise the warning string.
 */
function content_notify_generate_unpublish_warning($node) {
  $warning = NULL;

  $unpublish_on_unixtime = $node->unpublish_on->value;
  $current_time = time();

  /** @var \Drupal\content_notify\ContentNotifyManager $content_notify_manager */
  $content_notify_manager = \Drupal::service('content_notify.manager');

  $debug = $content_notify_manager->getConfig('notify_debug');
  $include_unpublish_warning = $content_notify_manager->getConfig('notify_include_unpublish_warning_on_content');

  if ($debug) {
    $debug_current_time_override = $content_notify_manager->getConfig('notify_debug_current_time_override');
    $current_time = strtotime($debug_current_time_override);
  }

  if ($include_unpublish_warning
    && content_notify_is_in_window($node, $current_time)
  ) {
    $notify_date_format = $content_notify_manager->getConfig('notify_date_format');
    $bundles_to_unpublish = $content_notify_manager->getConfig('notify_unpublish_bundles');

    if (in_array($node->bundle(), $bundles_to_unpublish)
      && !empty($unpublish_on_unixtime)
      && $current_time < $unpublish_on_unixtime
    ) {
      $eastern_time_zone = new \DateTimeZone('America/New_York');
      $date_time = new \Datetime();
      $date_time->setTimestamp($unpublish_on_unixtime);
      $date_time->setTimezone($eastern_time_zone);
      $unpublish_on_string = $date_time->format($notify_date_format);

      $warning_text = $content_notify_manager->getConfig('notify_unpublish_warning_on_content');

      $warning = $warning_text . ' ' . $unpublish_on_string;
    }
  }

  return $warning;
}

/**
 * Puts message in html markup.
 *
 * @param string $message
 *   The message.
 *
 * @return string
 *   The markup.
 */
function content_notify_markup_warning($message) {
  $markup = '';

  $markup .= '
<div>
    <div role="contentinfo" aria-label="Warning message" class="messages messages--warning">
        <h2 class="visually-hidden">Warning message</h2>
        <ul class="messages__list">
            <li class="messages__item">';
  $markup .= $message;
  $markup .= '
            </li>
        </ul>
    </div>
</div>';

  return $markup;
}

/**
 * Implements hook_entity_extra_field_info().
 */
function content_notify_entity_extra_field_info() {
  $extra = [];

  $description = t('Content notify extend form for nodes');
  $label = t('Notify extend form');
  $field_machine_name = 'notify_extend_form';

  /** @var \Drupal\content_notify\ContentNotifyManager $content_notify_manager */
  $content_notify_manager = \Drupal::service('content_notify.manager');

  $bundles_to_unpublish = $content_notify_manager->getConfig('notify_unpublish_bundles');
  $bundles_to_warn_invalid = $content_notify_manager->getConfig('notify_invalid_bundles');
  $bundles_any_notify = array_unique(array_merge($bundles_to_unpublish, $bundles_to_warn_invalid));

  foreach ($bundles_any_notify as $bundle) {
    $extra['node'][$bundle]['display'][$field_machine_name] = [
      'label' => $label,
      'description' => $description,
      'weight' => -10,
      'visible' => TRUE,
    ];
  }

  $description = t('Content notify unpublish warning for nodes');
  $label = t('Notify unpublish warning');
  $field_machine_name = 'notify_unpublish_warning';

  foreach ($bundles_to_unpublish as $bundle) {
    $extra['node'][$bundle]['display'][$field_machine_name] = [
      'label' => $label,
      'description' => $description,
      'weight' => -15,
      'visible' => TRUE,
    ];
  }

  return $extra;
}

/**
 * Implements hook_ENTITY_TYPE_view() for node entities.
 *
 * @see content_notify_entity_extra_field_info()
 */
function content_notify_node_view(array &$build, \Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display, $view_mode) {
  // Only do the extra work if the component is configured to be displayed.
  if ($display
    ->getComponent('notify_extend_form')
  ) {
    $unpublish_on_unixtime = $entity->unpublish_on->value;
    $notify_invalid_on_unixtime = $entity->notify_invalid_on->value;
    $current_time = time();

    /** @var \Drupal\content_notify\ContentNotifyManager $content_notify_manager */
    $content_notify_manager = \Drupal::service('content_notify.manager');

    $debug = $content_notify_manager->getConfig('notify_debug');
    $include_extend = $content_notify_manager->getConfig('notify_include_extend_on_content');

    if ($debug) {
      $debug_current_time_override = $content_notify_manager->getConfig('notify_debug_current_time_override');
      $current_time = strtotime($debug_current_time_override);
    }

    if ($include_extend
      && content_notify_is_in_window($entity, $current_time)
    ) {
      $build['notify_extend_form'] = \Drupal::formBuilder()
        ->getForm(
          'Drupal\content_notify\Form\NotifyExtendForm',
          $entity->id()
        );
    }
  }

  if ($display
    ->getComponent('notify_unpublish_warning')
  ) {
    $warning = content_notify_generate_unpublish_warning($entity);
    if ($warning) {
      $build['#attached']['library'][] = 'seven/messages';
      $build['notify_unpublish_warning']['#markup'] = content_notify_markup_warning($warning);
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave() for node entities.
 */
function content_notify_node_presave(EntityInterface $node) {

  /** @var \Drupal\content_notify\ContentNotifyManager $content_notify_manager */
  $content_notify_manager = \Drupal::service('content_notify.manager');

  $ignore_translations = $content_notify_manager->getConfig('notify_ignore_translations');

  // If a translation of the node, return and do not save values.
  if ($ignore_translations
    && !$node->isDefaultTranslation()
  ) {
    return;
  }

  $always_push_out_time = $content_notify_manager->getConfig('notify_always_push_out_time');
  $base_on_published_date = $content_notify_manager->getConfig('notify_base_on_published_date');

  // Unpublish notify.
  $checkSchedulerExists = $content_notify_manager->checkSchedulerExists();
  $checkUnpublishedNodeType = $content_notify_manager->checkNodeType('unpublish', $node->getType());

  $criteria = FALSE;
  $module_workflows_enabled = \Drupal::moduleHandler()
    ->moduleExists('workflows');
  if ($module_workflows_enabled) {
    $use_transition = $content_notify_manager->getConfig('notify_workflow_use_transition_criteria');
    if ($use_transition) {
      $to_state = $content_notify_manager->getConfig('notify_workflow_to_state');
      $current_workflow_state = $node->get('moderation_state')->getString();

      // Get all of the revision ids.
      $revision_ids = \Drupal::entityTypeManager()
        ->getStorage('node')
        ->revisionIds($node);
      if (!empty($revision_ids)) {
        $last_revision_id = end($revision_ids);
        $last_revision = \Drupal::entityTypeManager()
          ->getStorage('node')
          ->loadRevision($last_revision_id);
        $last_revision_state = $last_revision->get('moderation_state')
          ->getString();

        if ($last_revision_state !== $current_workflow_state
          && $current_workflow_state === $to_state
        ) {
          $criteria = TRUE;
        }
      }
    }
  }
  else {
    if ($node->isPublished()) {
      $criteria = TRUE;
    }
  }

  if ($criteria === FALSE) {
    $sync_unpublish = $content_notify_manager->getConfig('notify_sync_unpublish_time');

    // User might be manually setting notify times in the edit form.
    // If they change the notify on time, they might expect the unpublish time
    // to stay in sync.
    if ($sync_unpublish
      && $node->notify_unpublish_on->value
    ) {
      $notify_unpublish_time = $content_notify_manager->getConfig('notify_unpublish_time');
      $notify_unpublish_on = $node->notify_unpublish_on->value;
      $node->set('unpublish_on', date("U", strtotime("+" . $notify_unpublish_time . " days", $notify_unpublish_on)));
    }

    return;
  }

  if ($checkSchedulerExists && $checkUnpublishedNodeType) {
    if ($always_push_out_time
      || empty($node->publish_on->value) && empty($node->unpublish_on->value)) {
      $days = $content_notify_manager->getConfig('notify_set_unpublish_time');
      if ($days) {
        $node->set('unpublish_on', date("U", strtotime("+" . $days . " days")));
        $node->unpublish_on->value = date("U", strtotime("+" . $days . " days"));
      }
    }

    if ($always_push_out_time
      || empty($node->notify_unpublish_on->value)
    ) {
      $notify_unpublish_time = $content_notify_manager->getConfig('notify_unpublish_time');
      $notify_unpublish_on = (!empty($node->unpublish_on->value)) ? (date("U", strtotime("-" . $notify_unpublish_time . " days", $node->unpublish_on->value))) : 0;
      $node->set('notify_unpublish_on', $notify_unpublish_on);
    }
  }

  // Old content notify.
  $checkOldNodeType = $content_notify_manager->checkNodeType('invalid', $node->getType());
  if ($checkOldNodeType) {
    $notify_invalid_time = $content_notify_manager->getConfig('notify_invalid_time');
    if ($always_push_out_time
      || empty($node->notify_invalid_on->value)
    ) {
      $notify_invalid_on = date("U", strtotime("+" . $notify_invalid_time . " days", $node->created->value));
      if ($base_on_published_date) {
        $notify_invalid_on = date("U", strtotime("+" . $notify_invalid_time . " days"));
      }
      $node->set('notify_invalid_on', $notify_invalid_on);
    }
  }

}

/**
 * Implements hook_cron().
 */
function content_notify_cron() {
  // Use drupal_static so that any function can find out if we are running
  // content_notify cron. Set the default value to FALSE, then turn on the flag.
  // @see content_notify_cron_is_running()
  $content_notify_cron = &drupal_static(__FUNCTION__, FALSE);
  $content_notify_cron = TRUE;

  /** @var \Drupal\content_notify\ContentNotifyManager $content_notify_manager */
  $content_notify_manager = \Drupal::service('content_notify.manager');

  $include_extend = $content_notify_manager->getConfig('notify_include_extend_on_content');
  $include_unpublish_warning = $content_notify_manager->getConfig('notify_include_unpublish_warning_on_content');

  $content_notify_manager->notifyUnpublished();
  $content_notify_manager->notifyInvalid();

  // Showing a warning (or not) and the extend button (or not) depend on the
  // current time. So as time passes, invalidate the cache for nodes.
  if ($include_unpublish_warning
    || $include_extend
  ) {
    $tags = ['rendered'];
    Cache::invalidateTags($tags);
  }

  // Reset the static scheduler_cron flag.
  drupal_static_reset(__FUNCTION__);
}

/**
 * Return whether content_notify cron is running.
 *
 * This function can be called from any content_notify function,
 * from any contrib
 * module or from custom PHP in a view or rule.
 *
 * @return bool
 *   TRUE if content_notify_cron is currently running. FALSE if not.
 */
function content_notify_cron_is_running() {
  return drupal_static('content_notify_cron');
}

/**
 * Implements hook_mail().
 */
function content_notify_mail($key, &$message, $params) {

  $message['from'] = \Drupal::config('system.site')->get('mail');
  $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed; delsp=yes';

  switch ($key) {

    case 'unpublish':
      $message['subject'] = $params['subject'];
      $message['body'][] = $params['message'];
      break;

    case 'invalid':
      $message['subject'] = $params['subject'];
      $message['body'][] = $params['message'];
      break;
  }
}
